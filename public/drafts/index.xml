<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Drafts on The Essence of Software</title>
    <link>https://essenceofsoftware.com/drafts/</link>
    <description>Recent content in Drafts on The Essence of Software</description>
    <image>
      <title>The Essence of Software</title>
      <url>https://essenceofsoftware.com/eos-twitter-card.png</url>
      <link>https://essenceofsoftware.com/eos-twitter-card.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Daniel Jackson</copyright>
    <lastBuildDate>Thu, 11 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://essenceofsoftware.com/drafts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>A new take on concept design</title>
      <link>https://essenceofsoftware.com/drafts/concepts-redux/new-take/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://essenceofsoftware.com/drafts/concepts-redux/new-take/</guid>
      <description>It’s been just over two years since the publication of The Essence of Software (EOS). In that time, engaging with readers, consulting and teaching to students and practitioners has given me a new perspective on concept design.
In a series of notes (of which this is the first), I hope to share some of the respects in which my understanding has evolved. In addition to having a better sense of what matters most, I think I have a greater appreciation of the obstacles that make concept design seem (at the same time!</description>
    </item>
    
    <item>
      <title>What is software design?</title>
      <link>https://essenceofsoftware.com/drafts/concepts-redux/what-is-design/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://essenceofsoftware.com/drafts/concepts-redux/what-is-design/</guid>
      <description>As I explain in EOS, I’ve coopted the term “software design” to mean something different from what most people in the software world expect. To me, it means designing function: how the software will behave and interact with its users and the world.
So the design of the software is what determines whether or not it fulfills the user’s needs, because if the function is wrong (or confusing), the user won’t be happy.</description>
    </item>
    
    <item>
      <title>Building on good ideas</title>
      <link>https://essenceofsoftware.com/drafts/concepts-redux/building-on-ideas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://essenceofsoftware.com/drafts/concepts-redux/building-on-ideas/</guid>
      <description>Concept design builds on many familiar ideas. To mention a few:
From use cases and user stories, concept design takes the idea that software interacts with the world through scenarios that deliver value. From user-centered design (as taught by Don Norman in The Design of Everyday Things), concept design takes the idea that the user interface is a kind of apparition (a “system image” in Norman’s phrasing) that stands between the user and the system, revealing only indirectly the underlying reality.</description>
    </item>
    
    <item>
      <title>Notes on design of a GPT-powered tutor</title>
      <link>https://essenceofsoftware.com/drafts/ai-tutor-v1/</link>
      <pubDate>Thu, 11 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://essenceofsoftware.com/drafts/ai-tutor-v1/</guid>
      <description>Notes on design of a GPT-powered tutor</description>
    </item>
    
    <item>
      <title>Notes on design of a GPT-powered tutor</title>
      <link>https://essenceofsoftware.com/drafts/ai-tutor-v2/</link>
      <pubDate>Thu, 11 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://essenceofsoftware.com/drafts/ai-tutor-v2/</guid>
      <description>Notes on design of a GPT-powered tutor</description>
    </item>
    
    <item>
      <title>Noosphere concepts</title>
      <link>https://essenceofsoftware.com/drafts/noosphere-v1/</link>
      <pubDate>Tue, 09 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://essenceofsoftware.com/drafts/noosphere-v1/</guid>
      <description>A Concept Exploration of Noosphere</description>
    </item>
    
    <item>
      <title></title>
      <link>https://essenceofsoftware.com/drafts/concepts-redux/strong-concepts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://essenceofsoftware.com/drafts/concepts-redux/strong-concepts/</guid>
      <description>Strong concepts. Having one or a few core concepts that are embodied in scenarios that deliver what the user needs, overcoming points of pain and friction. For Zoom, that’s the meeting concept. Conceptual clarity. The core concepts of an app have to be conveyed, through the UI and all explanatory material, with clarity and simplicity. It’s probably not possible to do this for a “dual use” app (like Hangouts) that offers multiple concepts (eg, video call and meeting) for the same function.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://essenceofsoftware.com/drafts/concepts-redux/the-operational-principle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://essenceofsoftware.com/drafts/concepts-redux/the-operational-principle/</guid>
      <description>The operational principle Using a term coined by Michael Polanyi (and brought to software engineering by Michael Jackson), I call a scenario that explains how a product “just works” its operational principle (OP).
The operational principle is just a sample scenario, but it includes enough richness to convey typical usages. The example I gave above for Zoom could be written in a more textual way like this
&amp;lt;create, start, join+, end&amp;gt; where join+ means one or more join actions.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://essenceofsoftware.com/drafts/deemph-data-model-and-action-definitions-for-coding/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://essenceofsoftware.com/drafts/deemph-data-model-and-action-definitions-for-coding/</guid>
      <description>deemph: data model and action definitions for coding. extending: modularity, but probably needs data. essence: OPs. relevance: LLMs</description>
    </item>
    
    <item>
      <title></title>
      <link>https://essenceofsoftware.com/drafts/design-is-necessary-but-not-sufficient/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://essenceofsoftware.com/drafts/design-is-necessary-but-not-sufficient/</guid>
      <description>Design is necessary but not sufficient One final response to another possible skepticism. Some might say that none of this design stuff matters if the software isn’t reliable, scalable, performant, etc.
The answer to this objection is easy: yes. Design is necessary but not sufficient. Just as great architecture won’t make a building successful if the civil engineers fail to ensure that it can withstand the wind, so a well-designed software product can’t succeed without good software engineering.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://essenceofsoftware.com/drafts/noosphere-v2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://essenceofsoftware.com/drafts/noosphere-v2/</guid>
      <description>A Concept Model of Noosphere Warning Heavy-duty concept design ahead! This note exploring the concept design of Noosphere is not for the faint-hearted. For those who aren&amp;rsquo;t very familiar with the concepts of decentralized storage (which includes me!) or who are learning concept design for the first time, this is likely not the best introduction to concepts.
Why conceptualize Noosphere? This note applies my theory of concept design to Gordon Brander&amp;rsquo;s Noosphere.</description>
    </item>
    
  </channel>
</rss>
