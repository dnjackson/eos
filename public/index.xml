<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Home on The Essence of Software</title>
    <link>https://essenceofsoftware.com/</link>
    <description>Recent content in Home on The Essence of Software</description>
    <image>
      <title>The Essence of Software</title>
      <url>https://essenceofsoftware.com/eos-twitter-card.png</url>
      <link>https://essenceofsoftware.com/eos-twitter-card.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Daniel Jackson</copyright>
    <lastBuildDate>Tue, 26 Nov 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://essenceofsoftware.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>A new take on concept design</title>
      <link>https://essenceofsoftware.com/drafts/concepts-redux/new-take/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://essenceofsoftware.com/drafts/concepts-redux/new-take/</guid>
      <description>It’s been just over two years since the publication of The Essence of Software (EOS). In that time, engaging with readers, consulting and teaching to students and practitioners has given me a new perspective on concept design.
In a series of notes (of which this is the first), I hope to share some of the respects in which my understanding has evolved. In addition to having a better sense of what matters most, I think I have a greater appreciation of the obstacles that make concept design seem (at the same time!</description>
    </item>
    
    <item>
      <title>What is software design?</title>
      <link>https://essenceofsoftware.com/drafts/concepts-redux/what-is-design/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://essenceofsoftware.com/drafts/concepts-redux/what-is-design/</guid>
      <description>As I explain in EOS, I’ve coopted the term “software design” to mean something different from what most people in the software world expect. To me, it means designing function: how the software will behave and interact with its users and the world.
So the design of the software is what determines whether or not it fulfills the user’s needs, because if the function is wrong (or confusing), the user won’t be happy.</description>
    </item>
    
    <item>
      <title>Building on good ideas</title>
      <link>https://essenceofsoftware.com/drafts/concepts-redux/building-on-ideas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://essenceofsoftware.com/drafts/concepts-redux/building-on-ideas/</guid>
      <description>Concept design builds on many familiar ideas. To mention a few:
From use cases and user stories, concept design takes the idea that software interacts with the world through scenarios that deliver value. From user-centered design (as taught by Don Norman in The Design of Everyday Things), concept design takes the idea that the user interface is a kind of apparition (a “system image” in Norman’s phrasing) that stands between the user and the system, revealing only indirectly the underlying reality.</description>
    </item>
    
    <item>
      <title>How software succeeds</title>
      <link>https://essenceofsoftware.com/tutorials/gentle-intro/how-software-succeeds/</link>
      <pubDate>Mon, 08 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://essenceofsoftware.com/tutorials/gentle-intro/how-software-succeeds/</guid>
      <description>The first step to great software: scenarios of success</description>
    </item>
    
    <item>
      <title>Design vs. engineering</title>
      <link>https://essenceofsoftware.com/tutorials/design-general/design-vs-engineering/</link>
      <pubDate>Tue, 02 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://essenceofsoftware.com/tutorials/design-general/design-vs-engineering/</guid>
      <description>What&amp;#39;s the difference between design and engineering?</description>
    </item>
    
    <item>
      <title>How great design happens</title>
      <link>https://essenceofsoftware.com/tutorials/design-general/great-design/</link>
      <pubDate>Tue, 02 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://essenceofsoftware.com/tutorials/design-general/great-design/</guid>
      <description>Think about your favorite product, whether it’s a photo-editing app or a toaster, and ask yourself: how did it get to be so good?
With all the hype in the design world about creativity and brainstorming, it’s easy to imagine that great designs simply appear, out of the blue. Someone conjures up a new idea, and it just needs to be translated from sketch to product. Maybe many details need to be added, but the quality of the design was there at the start—like a tiny seed that grows spontaneously into a magnificent tree.</description>
    </item>
    
    <item>
      <title>Form, context &amp; misfits</title>
      <link>https://essenceofsoftware.com/tutorials/design-general/misfits/</link>
      <pubDate>Tue, 02 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://essenceofsoftware.com/tutorials/design-general/misfits/</guid>
      <description>What is a design problem? What exactly is a design problem? And why are design problems often hard to solve?
The most compelling answer to this question, in my view, comes from Christopher Alexander in his influential book Notes on the Synthesis of Form (1964).
Most of the book is about a way to structure goals into a tree, by noting alignments and conflicts between them, and grouping them to minimize conflicts across groups.</description>
    </item>
    
    <item>
      <title>Generic fitness criteria</title>
      <link>https://essenceofsoftware.com/tutorials/design-general/fitness-criteria/</link>
      <pubDate>Tue, 02 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://essenceofsoftware.com/tutorials/design-general/fitness-criteria/</guid>
      <description>Seven criteria What makes a design fit for purpose depends—surprise!—on the purpose. But generic criteria are helpful for two reasons. First, they give you some basis for evaluation, however crude. Second, they can be used as a checklist to suggest more specific ones.
A software product should be:
Efficient: letting users accomplish their goals with no more steps or effort than needed; Flexible: supporting not just one fixed and narrow goal, but a range of goals that users are likely to have; Responsive: responding to requests from the user in a timely way; Understandable: behaving predictably, offering options and producing outcomes that make sense to users; Robust: tolerant of errors made by the user and other common perturbations of context, such as failures of other systems or agents to perform their expected roles; Secure: resistant to malicious attacks, including social engineering attacks that induce the user to perform unintended actions.</description>
    </item>
    
    <item>
      <title>Simplicity</title>
      <link>https://essenceofsoftware.com/tutorials/design-general/simplicity/</link>
      <pubDate>Tue, 02 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://essenceofsoftware.com/tutorials/design-general/simplicity/</guid>
      <description>Most of us* believe that simplicity is the key to design. I’m a sucker for the best quotes about it. Here are some of my favorites. First, Tony Hoare in his Turing Award lecture lamenting the complexity of Algol-68:
I conclude that there are two ways of constructing a software design: One way is to make it so simple that there are obviously no deficiencies and the other way is to make it so complicated that there are no obvious deficiencies.</description>
    </item>
    
    <item>
      <title>Levels of design</title>
      <link>https://essenceofsoftware.com/tutorials/design-general/levels-of-design/</link>
      <pubDate>Tue, 02 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://essenceofsoftware.com/tutorials/design-general/levels-of-design/</guid>
      <description>When you’re diagnosing a usability snag, or coming up with a new design idea, it’s helpful to know what level you’re working at.
Over the years, designers and researchers have defined various levels, reflecting their view of design and what they emphasize.
I find the following scheme most helpful:
Physical. If you want to think of levels as low and high, this one is at the bottom. It’s the level of design in which you’re concerned about the physical (and physiological) qualities of human users.</description>
    </item>
    
    <item>
      <title>Beyond the user interface</title>
      <link>https://essenceofsoftware.com/tutorials/design-general/beyond-ui/</link>
      <pubDate>Tue, 02 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://essenceofsoftware.com/tutorials/design-general/beyond-ui/</guid>
      <description>In the 1980s, there was a revolution in software. The Apple Macintosh came out (building on the invention of the WIMP interface at PARC), Don Norman wrote The Design of Everyday Things, and the first CHI conference was held.
Now everyone knows how important user interface design is, and there’s no excuse for messing it up. You can find several collections of UI design heuristics (such as Nielsen’s) online, and many companies publish standards for how to use UI widgets consistently (here’s Google’s, for example).</description>
    </item>
    
    <item>
      <title>Divergent and convergent design</title>
      <link>https://essenceofsoftware.com/tutorials/design-general/diverge-converge/</link>
      <pubDate>Mon, 11 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>https://essenceofsoftware.com/tutorials/design-general/diverge-converge/</guid>
      <description>Two modes of design thinking Design, whatever the domain, includes two different modes of thinking. In one, the designer generates ideas freely, often responding only loosely to any given need or problem. In the other, the designer takes some previously articulated design ideas, and attempts to improve them.
The first mode is expansive, and most successful when critical judgment is suspended; the second is reductive, and calls for focus and analysis.</description>
    </item>
    
    <item>
      <title>Tactics for divergent design</title>
      <link>https://essenceofsoftware.com/tutorials/design-general/divergent-tactics/</link>
      <pubDate>Mon, 11 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>https://essenceofsoftware.com/tutorials/design-general/divergent-tactics/</guid>
      <description>Tactics for divergence Let’s consider some tactics that you might find useful as a software designer to make divergent design more effective. To make these concrete, I’ll suppose that we’re developing an app to support architectural walking tours.
Interviewing stakeholders Talking to potential users and other stakeholders is good not only for identifying needs but also for getting design ideas. You can ask what tools and techniques a user currently finds helpful, and what changes might make them more effective.</description>
    </item>
    
    <item>
      <title>Software = concepts</title>
      <link>https://essenceofsoftware.com/tutorials/concept-basics/sw-as-concepts/</link>
      <pubDate>Tue, 23 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://essenceofsoftware.com/tutorials/concept-basics/sw-as-concepts/</guid>
      <description>Any software app, service or system can be viewed as a collection of interacting concepts.
Concepts are the building blocks of software Imagine explaining Twitter to someone who&amp;rsquo;s never used it. You might tell them about the Tweet and Follower concepts, then maybe Hashtag and Like (aka Upvote), and if they&amp;rsquo;re keen to know even more, you could explain VerifiedAccount or Bookmark.
Each concept can be explained with a purpose (what it&amp;rsquo;s for) and an operational principle (how you use it):</description>
    </item>
    
    <item>
      <title>Operational principles</title>
      <link>https://essenceofsoftware.com/tutorials/concept-basics/principle/</link>
      <pubDate>Tue, 02 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://essenceofsoftware.com/tutorials/concept-basics/principle/</guid>
      <description>A compelling way to explain how something works is to tell a story. Not any story, but a kind of defining story that shows, through a typical scenario, why the thing is useful and fulfills its purpose.
The Minuteman Library Network, for example, offers a wonderful service. If I request a book, then when it becomes available at my local library, I get an email notifying me that it’s ready to be picked up.</description>
    </item>
    
    <item>
      <title>Concept purposes</title>
      <link>https://essenceofsoftware.com/tutorials/concept-basics/purpose/</link>
      <pubDate>Mon, 11 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>https://essenceofsoftware.com/tutorials/concept-basics/purpose/</guid>
      <description>The role of purposes From what to why. The beginning of wisdom for a designer is to stop asking “what?” and start asking “why?”.
This applies at every level. You can ask “what application shall I design?”. But a better question is “why would I design that?”. And at a finer grain, the question “what features should my app have?” gives way to “why should my app have these particular features?</description>
    </item>
    
    <item>
      <title>Apps are state machines</title>
      <link>https://essenceofsoftware.com/tutorials/concept-basics/app-as-machine/</link>
      <pubDate>Tue, 02 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://essenceofsoftware.com/tutorials/concept-basics/app-as-machine/</guid>
      <description>If user experience runs deeper than the user interface, we need a way to talk about an app that isn’t just visual, and that captures behavior in a more fundamental way.
Programmers think in terms of complicated things like objects, callbacks, streams, functionals, and so on. They’re essential for structuring code, but for behavior a much simpler model is effective.
State machines That model is the state machine. You’ve probably come across state machines, either in a class about the theory of computation, or seeing diagrams like this:</description>
    </item>
    
    <item>
      <title>Concepts are state machines</title>
      <link>https://essenceofsoftware.com/tutorials/concept-basics/concept-as-machine/</link>
      <pubDate>Wed, 14 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://essenceofsoftware.com/tutorials/concept-basics/concept-as-machine/</guid>
      <description>As I explained in another tutorial, the easiest and most effective way to define the behavior of an app precisely is to model it as a state machine. The app has a set of possible states, and actions that update and query the states. An execution of the app is just a sequence of actions (or more correctly, action instances that include particular action arguments), and the behavior as a whole is the set of all possible executions.</description>
    </item>
    
    <item>
      <title>Concept state</title>
      <link>https://essenceofsoftware.com/tutorials/concept-basics/state/</link>
      <pubDate>Tue, 23 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://essenceofsoftware.com/tutorials/concept-basics/state/</guid>
      <description>Motivation: Defining Behavior The operational principle of a concept explains its archetypal behavior: how it’s typically used, and how it fulfills its purpose. But for a concept to be flexible and powerful, it should work in many different scenarios, so we need a way to pin down the behavior in detail.
Using the notion of a state machine, we can define how a concept will behave in every possible situation. Then we can analyze the design to make sure that the behavior is always acceptable.</description>
    </item>
    
    <item>
      <title>Concept criteria: what&#39;s a concept?</title>
      <link>https://essenceofsoftware.com/tutorials/concept-basics/criteria/</link>
      <pubDate>Mon, 11 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>https://essenceofsoftware.com/tutorials/concept-basics/criteria/</guid>
      <description>Two sides of a coin The key to concept design is, perhaps not surprisingly, the idea of concepts. A concept is two things at once. On the one hand, a “concept” means you’d expect it to mean: a mental construct that you need to understand to be able to use an app effectively. So you might that to use Photoshop you need to understand the “concept of a layer”; to use Facebook you need to understand the “concept of friending”; and so on.</description>
    </item>
    
    <item>
      <title>Concept composition and sync</title>
      <link>https://essenceofsoftware.com/tutorials/concept-basics/sync/</link>
      <pubDate>Wed, 14 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://essenceofsoftware.com/tutorials/concept-basics/sync/</guid>
      <description>In another tutorial, I showed a concept definition for Yellkey, a popular URL shortening service:
concept Yellkey purpose shorten URLs to common words principle if you register a URL u for t seconds and obtaining a shortening s, looking up s will yield u until the shortening expires t seconds from now state used: set String shortFor: used -&amp;gt; one URL expiry: used -&amp;gt; one Date const shorthands: set String actions // register URL u for t seconds // resulting in shortening s register (u: URL, t: int, out s: String) s in shorthands - used s.</description>
    </item>
    
    <item>
      <title>Concept dependencies and subsets</title>
      <link>https://essenceofsoftware.com/tutorials/concept-basics/dependency/</link>
      <pubDate>Mon, 11 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>https://essenceofsoftware.com/tutorials/concept-basics/dependency/</guid>
      <description>An idea you need to know One of the most important and useful ideas in software also happens to be one of the least well known. It was introduced in a paper that David Parnas wrote in 1979, entitled Designing Software for Ease of Extension and Contraction.
Program families. Following on from an earlier paper that introduced the idea of “program families”&amp;mdash;that when you design software you should realize that you’re designing a whole family of programs, not just one&amp;mdash;this paper addresses the question of how to do this.</description>
    </item>
    
    <item>
      <title>Concept modularity</title>
      <link>https://essenceofsoftware.com/tutorials/concept-basics/modularity/</link>
      <pubDate>Thu, 22 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://essenceofsoftware.com/tutorials/concept-basics/modularity/</guid>
      <description>Why modularity matters To see why modularity is so critical in software design, consider what goes wrong when it’s missing.
For the programmer, life becomes miserable. Whenever you need to understand or modify some piece of functionality, there’s no single place in the code to go to, and you may have to visit many widely separated locations (and just finding them can be a major challenge). Even removing (let alone adding) functionality is hard, because the parts of the codebase are all interconnected in subtle ways, and taking anything away risks breaking the parts that remain.</description>
    </item>
    
    <item>
      <title>Autodesk Workshop</title>
      <link>https://essenceofsoftware.com/workshops/autodesk/schedule/</link>
      <pubDate>Tue, 26 Nov 2024 00:00:00 +0000</pubDate>
      
      <guid>https://essenceofsoftware.com/workshops/autodesk/schedule/</guid>
      <description>Schedule with links to slides and other resources</description>
    </item>
    
    <item>
      <title>Concept Architecture</title>
      <link>https://essenceofsoftware.com/drafts/concept-architecture/</link>
      <pubDate>Mon, 12 Aug 2024 00:00:00 +0000</pubDate>
      
      <guid>https://essenceofsoftware.com/drafts/concept-architecture/</guid>
      <description>A Proposal for a Concept-based App Architecture</description>
    </item>
    
    <item>
      <title>Concept Configuration</title>
      <link>https://essenceofsoftware.com/drafts/concept-extents/</link>
      <pubDate>Tue, 30 Jul 2024 00:00:00 +0000</pubDate>
      
      <guid>https://essenceofsoftware.com/drafts/concept-extents/</guid>
      <description>Notes on the design of concept configurations</description>
    </item>
    
    <item>
      <title>The End of Agile</title>
      <link>https://essenceofsoftware.com/posts/end-of-agile/</link>
      <pubDate>Tue, 18 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://essenceofsoftware.com/posts/end-of-agile/</guid>
      <description>Why agile no longer makes sense in the LLM era.</description>
    </item>
    
    <item>
      <title>A GPT-powered tutor</title>
      <link>https://essenceofsoftware.com/studies/larger/tutor/</link>
      <pubDate>Tue, 11 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://essenceofsoftware.com/studies/larger/tutor/</guid>
      <description>Notes on designing a GPT-powered tutor using concepts</description>
    </item>
    
    <item>
      <title>Android Camera API</title>
      <link>https://essenceofsoftware.com/studies/larger/rotation/</link>
      <pubDate>Tue, 11 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://essenceofsoftware.com/studies/larger/rotation/</guid>
      <description>Applying concept design to the camera rotation API</description>
    </item>
    
    <item>
      <title>A Concept Experiment at Palantir</title>
      <link>https://essenceofsoftware.com/posts/palantir/</link>
      <pubDate>Mon, 26 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://essenceofsoftware.com/posts/palantir/</guid>
      <description>Lessons learned from deploying concepts at scale.</description>
    </item>
    
    <item>
      <title>Notes on design of a GPT-powered tutor</title>
      <link>https://essenceofsoftware.com/drafts/ai-tutor-v1/</link>
      <pubDate>Thu, 11 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://essenceofsoftware.com/drafts/ai-tutor-v1/</guid>
      <description>Notes on design of a GPT-powered tutor</description>
    </item>
    
    <item>
      <title>Notes on design of a GPT-powered tutor</title>
      <link>https://essenceofsoftware.com/drafts/ai-tutor-v2/</link>
      <pubDate>Thu, 11 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://essenceofsoftware.com/drafts/ai-tutor-v2/</guid>
      <description>Notes on design of a GPT-powered tutor</description>
    </item>
    
    <item>
      <title>Noosphere concepts</title>
      <link>https://essenceofsoftware.com/drafts/noosphere-v1/</link>
      <pubDate>Tue, 09 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://essenceofsoftware.com/drafts/noosphere-v1/</guid>
      <description>A Concept Exploration of Noosphere</description>
    </item>
    
    <item>
      <title>Three Stages of Enlightenment</title>
      <link>https://essenceofsoftware.com/posts/three-stages/</link>
      <pubDate>Tue, 02 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://essenceofsoftware.com/posts/three-stages/</guid>
      <description>A brief intro to concept design in three parts.</description>
    </item>
    
    <item>
      <title>Breaking Integrity: Three Examples</title>
      <link>https://essenceofsoftware.com/studies/small/broken-integrity/</link>
      <pubDate>Sun, 02 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://essenceofsoftware.com/studies/small/broken-integrity/</guid>
      <description>Integrity violations aren&amp;rsquo;t as common as I once expected. But when they happen, they&amp;rsquo;re bad.</description>
    </item>
    
    <item>
      <title>Dark Concepts in Software Design</title>
      <link>https://essenceofsoftware.com/posts/dark-concepts/</link>
      <pubDate>Mon, 27 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://essenceofsoftware.com/posts/dark-concepts/</guid>
      <description>The building blocks that social media apps use to control us.</description>
    </item>
    
    <item>
      <title>Conceptual models missed the point</title>
      <link>https://essenceofsoftware.com/posts/conceptual-models/</link>
      <pubDate>Tue, 18 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://essenceofsoftware.com/posts/conceptual-models/</guid>
      <description>Don Norman’s book helped improve interface design, but it also misled us.</description>
    </item>
    
    <item>
      <title>The siloing of UX design</title>
      <link>https://essenceofsoftware.com/posts/ux-design-silo/</link>
      <pubDate>Fri, 14 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://essenceofsoftware.com/posts/ux-design-silo/</guid>
      <description>Why a new discipline of software design is needed.</description>
    </item>
    
    <item>
      <title>Zoom&#39;s Missing Concept</title>
      <link>https://essenceofsoftware.com/studies/small/zoom-missing/</link>
      <pubDate>Sun, 21 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://essenceofsoftware.com/studies/small/zoom-missing/</guid>
      <description>When critical concepts are missing</description>
    </item>
    
    <item>
      <title>Redesigning Zoom&#39;s Reaction Concept</title>
      <link>https://essenceofsoftware.com/studies/larger/zoom-reaction/</link>
      <pubDate>Tue, 12 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://essenceofsoftware.com/studies/larger/zoom-reaction/</guid>
      <description>A How-To Guide for Removing Irregularities in Your App</description>
    </item>
    
    <item>
      <title>Design Moves for Software</title>
      <link>https://essenceofsoftware.com/posts/design-moves/</link>
      <pubDate>Mon, 18 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://essenceofsoftware.com/posts/design-moves/</guid>
      <description>A new way to think about concept design</description>
    </item>
    
    <item>
      <title>Facebook and Dark Patterns</title>
      <link>https://essenceofsoftware.com/studies/larger/facebook/</link>
      <pubDate>Fri, 25 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://essenceofsoftware.com/studies/larger/facebook/</guid>
      <description>Finding Clarity in Design</description>
    </item>
    
    <item>
      <title>Concept Piggybacking in DNS</title>
      <link>https://essenceofsoftware.com/studies/larger/dns-dkim/</link>
      <pubDate>Fri, 11 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://essenceofsoftware.com/studies/larger/dns-dkim/</guid>
      <description>How overloading in DNS brings trouble</description>
    </item>
    
    <item>
      <title>The Class Number Dilemma</title>
      <link>https://essenceofsoftware.com/studies/small/class-numbers/</link>
      <pubDate>Thu, 24 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://essenceofsoftware.com/studies/small/class-numbers/</guid>
      <description>A Concept Example in Everyday Life</description>
    </item>
    
    <item>
      <title>The Essence of the Essence</title>
      <link>https://essenceofsoftware.com/posts/distillation/</link>
      <pubDate>Mon, 31 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://essenceofsoftware.com/posts/distillation/</guid>
      <description>A short(ish) summary of the book</description>
    </item>
    
    <item>
      <title>Concept Design Sketchnote</title>
      <link>https://essenceofsoftware.com/posts/sketchnote/</link>
      <pubDate>Sat, 20 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://essenceofsoftware.com/posts/sketchnote/</guid>
      <description>A graphical summary of concept design ideas</description>
    </item>
    
    <item>
      <title>Design Updates in Your Mailbox</title>
      <link>https://essenceofsoftware.com/posts/subscribe/</link>
      <pubDate>Fri, 19 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://essenceofsoftware.com/posts/subscribe/</guid>
      <description>Join an ultra-low-volume email list to hear new ideas about concepts and design.</description>
    </item>
    
    <item>
      <title>Upvote: An Example Concept</title>
      <link>https://essenceofsoftware.com/studies/small/upvote/</link>
      <pubDate>Wed, 17 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://essenceofsoftware.com/studies/small/upvote/</guid>
      <description>An example of what a concept catalog entry might look like</description>
    </item>
    
    <item>
      <title>ACM tech talk</title>
      <link>https://essenceofsoftware.com/posts/acm-tech-talk/</link>
      <pubDate>Sun, 14 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://essenceofsoftware.com/posts/acm-tech-talk/</guid>
      <description>Daniel explains concept design in a single video.</description>
    </item>
    
    <item>
      <title>Sample book chapters</title>
      <link>https://essenceofsoftware.com/posts/sample-chapters/</link>
      <pubDate>Sat, 13 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://essenceofsoftware.com/posts/sample-chapters/</guid>
      <description>Download free sample chapters.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://essenceofsoftware.com/drafts/concepts-redux/strong-concepts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://essenceofsoftware.com/drafts/concepts-redux/strong-concepts/</guid>
      <description>Strong concepts. Having one or a few core concepts that are embodied in scenarios that deliver what the user needs, overcoming points of pain and friction. For Zoom, that’s the meeting concept. Conceptual clarity. The core concepts of an app have to be conveyed, through the UI and all explanatory material, with clarity and simplicity. It’s probably not possible to do this for a “dual use” app (like Hangouts) that offers multiple concepts (eg, video call and meeting) for the same function.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://essenceofsoftware.com/drafts/concepts-redux/the-operational-principle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://essenceofsoftware.com/drafts/concepts-redux/the-operational-principle/</guid>
      <description>The operational principle Using a term coined by Michael Polanyi (and brought to software engineering by Michael Jackson), I call a scenario that explains how a product “just works” its operational principle (OP).
The operational principle is just a sample scenario, but it includes enough richness to convey typical usages. The example I gave above for Zoom could be written in a more textual way like this
&amp;lt;create, start, join+, end&amp;gt; where join+ means one or more join actions.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://essenceofsoftware.com/drafts/consent-concepts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://essenceofsoftware.com/drafts/consent-concepts/</guid>
      <description>Consent concepts
owner,
GPT suggests data custodian authorized party service provider
let’s go with provider or party.
consent applies to a resource instance (SSN) or type (bank account transaction). but can treat instance as a pathological type that has just one instance.
do we need actions allowed if party is specified? party might share. or purposes/uses
marketing, sharing, etc
can owner provide blanket consent to any party? or any party in some category?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://essenceofsoftware.com/drafts/deemph-data-model-and-action-definitions-for-coding/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://essenceofsoftware.com/drafts/deemph-data-model-and-action-definitions-for-coding/</guid>
      <description>deemph: data model and action definitions for coding. extending: modularity, but probably needs data. essence: OPs. relevance: LLMs</description>
    </item>
    
    <item>
      <title></title>
      <link>https://essenceofsoftware.com/drafts/design-is-necessary-but-not-sufficient/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://essenceofsoftware.com/drafts/design-is-necessary-but-not-sufficient/</guid>
      <description>Design is necessary but not sufficient One final response to another possible skepticism. Some might say that none of this design stuff matters if the software isn’t reliable, scalable, performant, etc.
The answer to this objection is easy: yes. Design is necessary but not sufficient. Just as great architecture won’t make a building successful if the civil engineers fail to ensure that it can withstand the wind, so a well-designed software product can’t succeed without good software engineering.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://essenceofsoftware.com/drafts/function-cascadedel-p-postconcept-c-commentconcept-i/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://essenceofsoftware.com/drafts/function-cascadedel-p-postconcept-c-commentconcept-i/</guid>
      <description>function cascadeDel (p: PostConcept, c: CommentConcept) { return i -&amp;gt; { p.del (*, i); c.del (i) } }
function authDel (p: PostConcept, s: SessionConcept) { return i -&amp;gt; { u = s.getUser ();
p.del (u, i); } }
function authCascDel (&amp;hellip;)
sy = new Sync ();
sy = sy.add (
new Link (“Post.del”,”Comment.del”) ) sy = sy.add (\ // when Sess.user, Post.del (u) )</description>
    </item>
    
    <item>
      <title></title>
      <link>https://essenceofsoftware.com/drafts/noosphere-v2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://essenceofsoftware.com/drafts/noosphere-v2/</guid>
      <description>A Concept Model of Noosphere Warning Heavy-duty concept design ahead! This note exploring the concept design of Noosphere is not for the faint-hearted. For those who aren&amp;rsquo;t very familiar with the concepts of decentralized storage (which includes me!) or who are learning concept design for the first time, this is likely not the best introduction to concepts.
Why conceptualize Noosphere? This note applies my theory of concept design to Gordon Brander&amp;rsquo;s Noosphere.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://essenceofsoftware.com/drafts/some-principles-regarding-concept-synchronization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://essenceofsoftware.com/drafts/some-principles-regarding-concept-synchronization/</guid>
      <description>Some notes about syncs Daniel Jackson
Sept 16, 2024
Separating Semantic Actions from HTTP Request All web app frameworks separate details of HTTP requests (HTTP verb, URL, serialization formats) from underlying data model calls. In our previous architecture (the one we used in Kodless and in the 6.1040 starter code), we used the HTTP “route” (that is, the endpoint API call corresponding to the HTTP request) also as the function that performs concept synchronization.</description>
    </item>
    
    
    
  </channel>
</rss>
